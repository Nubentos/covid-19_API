/**
 * API-nCoV2019
 * nCoV 2019 API provides information related with the case of pneumonia associated with the COVID-19 coronavirus.  The data we provide is collected from World Health Organization (WHO), the US Centers for Disease Control and Prevention (CDC), the Chinese Centre for Disease Control and Prevention (ECDC), Chinaâ€™s National Health Commission, and Chinese website DXY which provides regional case estimates faster than the national level reporting organizations.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiNCoV2019);
  }
}(this, function(expect, ApiNCoV2019) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiNCoV2019.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activeGet', function() {
      it('should call activeGet successfully', function(done) {
        //uncomment below and update the code to test activeGet
        //instance.activeGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('casesGet', function() {
      it('should call casesGet successfully', function(done) {
        //uncomment below and update the code to test casesGet
        //instance.casesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('casesPerOneMillionGet', function() {
      it('should call casesPerOneMillionGet successfully', function(done) {
        //uncomment below and update the code to test casesPerOneMillionGet
        //instance.casesPerOneMillionGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('criticalGet', function() {
      it('should call criticalGet successfully', function(done) {
        //uncomment below and update the code to test criticalGet
        //instance.criticalGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deathsGet', function() {
      it('should call deathsGet successfully', function(done) {
        //uncomment below and update the code to test deathsGet
        //instance.deathsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deathsPerOneMillionGet', function() {
      it('should call deathsPerOneMillionGet successfully', function(done) {
        //uncomment below and update the code to test deathsPerOneMillionGet
        //instance.deathsPerOneMillionGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recoveredGet', function() {
      it('should call recoveredGet successfully', function(done) {
        //uncomment below and update the code to test recoveredGet
        //instance.recoveredGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testsPerOneMillionGet', function() {
      it('should call testsPerOneMillionGet successfully', function(done) {
        //uncomment below and update the code to test testsPerOneMillionGet
        //instance.testsPerOneMillionGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('todayCasesGet', function() {
      it('should call todayCasesGet successfully', function(done) {
        //uncomment below and update the code to test todayCasesGet
        //instance.todayCasesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('todayDeathsGet', function() {
      it('should call todayDeathsGet successfully', function(done) {
        //uncomment below and update the code to test todayDeathsGet
        //instance.todayDeathsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('totalTestsGet', function() {
      it('should call totalTestsGet successfully', function(done) {
        //uncomment below and update the code to test totalTestsGet
        //instance.totalTestsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
