/*
 * API-nCoV2019
 * nCoV 2019 API provides information related with the case of pneumonia associated with the COVID-19 coronavirus.  The data we provide is collected from World Health Organization (WHO), the US Centers for Disease Control and Prevention (CDC), the Chinese Centre for Disease Control and Prevention (ECDC), Chinaâ€™s National Health Commission, and Chinese website DXY which provides regional case estimates faster than the national level reporting organizations.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.client.api.API_nCoV2019;

import org.wso2.client.api.ApiException;
import org.wso2.client.model.API_nCoV2019.ResultCases;
import org.wso2.client.model.API_nCoV2019.ResultCasesCountry;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Active cases
     *
     * Active cases
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activeGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.activeGet(country);

        // TODO: test validations
    }
    
    /**
     * Total of active cases.
     *
     * Summary of suspected and confirmed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void casesGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.casesGet(country);

        // TODO: test validations
    }
    
    /**
     * Cases per Million
     *
     * Cases per Million
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void casesPerOneMillionGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.casesPerOneMillionGet(country);

        // TODO: test validations
    }
    
    /**
     * Critical cases
     *
     * Critical cases
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void criticalGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.criticalGet(country);

        // TODO: test validations
    }
    
    /**
     * Total of persons death.
     *
     * Total of person death because a direct relation ship with 2019 - NCoV
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deathsGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.deathsGet(country);

        // TODO: test validations
    }
    
    /**
     * Deaths per Million
     *
     * Deaths per Million
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deathsPerOneMillionGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.deathsPerOneMillionGet(country);

        // TODO: test validations
    }
    
    /**
     * Recovered cases
     *
     * Recovered cases
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recoveredGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.recoveredGet(country);

        // TODO: test validations
    }
    
    /**
     * Test Per Million
     *
     * Test Per Million
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testsPerOneMillionGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.testsPerOneMillionGet(country);

        // TODO: test validations
    }
    
    /**
     * Today cases.
     *
     * Number of registered cases today
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void todayCasesGetTest() throws ApiException {
        List<String> country = null;
        ResultCasesCountry response = api.todayCasesGet(country);

        // TODO: test validations
    }
    
    /**
     * Today deaths.
     *
     * Number of deaths today
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void todayDeathsGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.todayDeathsGet(country);

        // TODO: test validations
    }
    
    /**
     * Test Totals
     *
     * Tests total
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void totalTestsGetTest() throws ApiException {
        List<String> country = null;
        ResultCases response = api.totalTestsGet(country);

        // TODO: test validations
    }
    
}
